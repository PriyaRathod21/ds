# -*- coding: utf-8 -*-
"""A5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1djPAE0YDIi520B95tyIk7vTZDC8ZhdUm

A5 Data Analytics II
1. Implement logistic regression using Python/R to perform classification on
Social_Network_Ads.csv dataset.
2. Compute Confusion matrix to find TP, FP, TN, FN, Accuracy, Error rate, Precision, Recall
on the given dataset.
"""

import numpy as np
import pandas as pd

data =  pd.read_csv('/content/Social_Network_Ads.csv')
data.head(5)

data.info()

data.describe()

data.isnull().sum()

data.shape

# Optional: Convert Gender to numeric
df['Gender'] = df['Gender'].map({'Male': 0, 'Female': 1})

# Features and Target
X = df[['Gender', 'Age', 'EstimatedSalary']]
y = df['Purchased']

# x = data.iloc[:,2:4]

# y = data.iloc[:,4]

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=42)

from sklearn.preprocessing import StandardScaler
scale = StandardScaler()
x_train = scale.fit_transform(x_train)
x_test = scale.transform(x_test)

from sklearn.linear_model import LogisticRegression
lr = LogisticRegression(random_state = 0,solver = 'lbfgs')
lr.fit(x_train,y_train)
pred = lr.predict(x_test)

print('Expected Output:',pred[:10])
print('-'*15)
print('Predicted Output:\n',y_test[:10])



#evaluate the model
# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:\n", cm)

# Extract values
TN, FP, FN, TP = cm.ravel()

# Metrics
accuracy = accuracy_score(y_test, y_pred) # TP+TN / TP+TN+FP+FN
error_rate = 1 - accuracy
precision = precision_score(y_test, y_pred) # TP / TP+FP
recall = recall_score(y_test, y_pred) # TP / TP+FN

print(f"True Positives (TP): {TP}")
print(f"False Positives (FP): {FP}")
print(f"True Negatives (TN): {TN}")
print(f"False Negatives (FN): {FN}")
print(f"Accuracy: {accuracy:.2f}")
print(f"Error Rate: {error_rate:.2f}")
print(f"Precision: {precision:.2f}")
print(f"Recall: {recall:.2f}")

#visualize
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()



# from sklearn.metrics import confusion_matrix,ConfusionMatrixDisplay,classification_report,accuracy_score, precision_score, recall_score, f1_score

# matrix = confusion_matrix(y_test,pred,labels = lr.classes_)
# print(matrix)

# tp, fn, fp, tn = confusion_matrix(y_test,pred,labels=[1,0]).reshape(-1)

