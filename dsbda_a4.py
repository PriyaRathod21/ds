# -*- coding: utf-8 -*-
"""Copy of A4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OqQHK8JKG9jBR_cWTkPBvozU5r603g9Y

A4. Data Analytics I
Create a Linear Regression Model using Python/R to predict home prices using Boston Housing
Dataset (https://www.kaggle.com/c/boston-housing). The Boston Housing dataset contains
information about various houses in Boston through different parameters. There are 506 samples
and 14 feature variables in this dataset.
The objective is to predict the value of prices of the house using the given features.

https://github.com/afnan47/sem6/tree/main/DSBDA
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("/content/sample_data/BostonHousing.csv")

df.head()

X = df[['crim', 'zn', 'indus', 'chas', 'nox', 'rm', 'age', 'dis', 'rad', 'tax',
       'ptratio', 'b', 'lstat']]
Y = df['medv']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,Y, test_size = 0.3, random_state = 42)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.fit_transform(X_test)

from sklearn.linear_model import LinearRegression
lr = LinearRegression()
lr.fit(X_train, y_train)
y_pred = lr.predict(X_test)

print(y_pred)

from sklearn.metrics import mean_squared_error
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
print("Root Mead squared Error is:")
print(rmse)

print("Training accuracy is:")
lr.score(X_train, y_train)

print("Testing accuracy is:")
lr.score(X_test, y_test)

from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error
print("R2_score: ", r2_score(y_test, y_pred))
print("mean_squared_error: ", mean_squared_error(y_test, y_pred))
print("mean_absolute_error: ", mean_absolute_error(y_test, y_pred))

y_pred = np.array(y_pred)
y_test = np.array(y_test)
data = {
    'Actual_value' : y_test.flatten(),
    'Predicted_value' : y_pred.flatten()
}
df1 = pd.DataFrame(data)
print(df1)

plt.figure(figsize=(6,6))
plt.scatter(y_test, y_pred, color='blue')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red')
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual vs Predicted Prices')
plt.grid(True)
plt.show()